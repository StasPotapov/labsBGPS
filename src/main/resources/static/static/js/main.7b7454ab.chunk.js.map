{"version":3,"sources":["logo.svg","JournalTable.js","Services/Request.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","JournalTable","Table","bordered","this","props","students","map","student","index","name","markPrIS","markSII","React","Component","Request","getStudents","fetch","then","res","json","App","state","activeGroup","setState","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6LAAAA,EAAOC,QAAU,IAA0B,kC,uKC4B5BC,E,iLAvBP,OAAO,kBAACC,EAAA,EAAD,CAAOC,UAAQ,GAClB,+BACA,4BACI,iCACA,kDACA,wDACA,oDAGJ,+BACCC,KAAKC,MAAMC,SAASC,KAAI,SAACC,EAASC,GAC/B,OAAO,4BACH,4BAAKA,EAAQ,GACb,4BAAKD,EAAQE,MACb,4BAAKF,EAAQG,UACb,4BAAKH,EAAQI,mB,GAjBNC,IAAMC,WCKlBC,EARC,CAEZC,YAFY,WAGX,OAAOC,MAAM,gBAAgBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UC6CnCC,E,YAhCb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACTC,YAAa,EACbjB,SAAU,MAJF,E,iFAQO,IAAD,OAClBS,EAAQC,cAAcE,MAAK,SAACZ,GACxB,EAAKkB,SAAS,CAAClB,SAAUA,S,+BAIrB,IAAD,OACP,OACI,yBAAKmB,UAAU,OACVrB,KAAKkB,MAAMhB,SAAW,kBAAC,EAAD,CAAcA,SAAUF,KAAKkB,MAAMhB,SAASF,KAAKkB,MAAMC,eAAkB,KAChG,4BAAQG,QAAS,WACb,EAAKF,SAAS,CAACD,YAAa,MADhC,0CAGA,4BAAQG,QAAS,WACb,EAAKF,SAAS,CAACD,YAAa,MADhC,0CAGA,4BAAQG,QAAS,WACb,EAAKF,SAAS,CAACD,YAAa,MADhC,+C,GAzBMV,IAAMC,WCHJa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7b7454ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\n\r\nclass JournalTable extends React.Component {\r\n    render() {\r\n        return <Table bordered>\r\n            <thead>\r\n            <tr>\r\n                <th>#</th>\r\n                <th>ФИО</th>\r\n                <th>ПрИС</th>\r\n                <th>СИИ</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {this.props.students.map((student, index) => {\r\n                return <tr>\r\n                    <td>{index + 1}</td>\r\n                    <td>{student.name}</td>\r\n                    <td>{student.markPrIS}</td>\r\n                    <td>{student.markSII}</td>\r\n                </tr>\r\n            })}\r\n            </tbody>\r\n        </Table>\r\n    }\r\n}\r\n\r\nexport default JournalTable;","const Request = {\r\n\r\n    getStudents() {\r\n    \treturn fetch(\"/getStudents\").then(res => res.json);\r\n    }\r\n\r\n};\r\n\r\nexport default Request","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { \n  Navbar, \n  Nav, \n  Dropdown, \n  Tabs, \n  Table, \n  Tab \n} from \"react-bootstrap\";\nimport JournalTable from './JournalTable';\nimport Request from \"./Services/Request\"\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n        activeGroup: 0,\n        students: null\n    };\n  }\n\n  componentDidMount() {\n    Request.getStudents().then((students) => {\n        this.setState({students: students});\n    });\n  }\n\n  render() {\n    return (\n        <div className=\"App\">\n            {this.state.students ? <JournalTable students={this.state.students[this.state.activeGroup]}/> : null}\n            <button onClick={() => {\n                this.setState({activeGroup: 0});\n            }}>Группа 1</button>\n            <button onClick={() => {\n                this.setState({activeGroup: 1});\n            }}>Группа 2</button>\n            <button onClick={() => {\n                this.setState({activeGroup: 2});\n            }}>Группа 3</button>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}